filename<-paste(dir,"case_count.json",sep="")
data<-fromJSON(filename)%>%as.data.frame
data<-fromJSON(filename)$cases_time_series%>%as.data.frame
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
data<-data[,c("date",names(data)[!names(data) %in% "date"]]
data<-data[,c("date",names(data)[!names(data) %in% "date"])]
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
class(data$date)
start<-as.Date("2020-30-Jan")
?as.Date
start<-as.Date("2020-30-Jan",tryFormats="%y%b%d")
start<-as.Date("2020-30-Jan",tryFormats="%Y%b%d")
start<-as.Date("2020-30-Jan",tryFormats="%Y%d%b")
start<-as.Date("2020-30-Jan",tryFormats="%Y%d%B")
start<-as.Date("2020-30-Jan",tryFormats="%Y%d%b")
start<-as.Date("30-Jan-2020")
start<-as.Date("30-Jan-2020",tryFormats="%d%b%Y")
start<-as.Date("30-Jan-2020",tryFormats="%d-%b-%Y")
start
class(start)
data$date<-as.Date(paste(data$date,"-2020"))
as.Date(paste(data$date,"-2020"))
paste(data$date,"-2020")
paste(data$date,"-2020",sep="")
paste(data$date,"2020",sep="")
start<-as.Date("30-Jan-2020",tryFormats="%d %b %Y")
start<-as.Date("30 Jan 2020",tryFormats="%d %b %Y")
data<-data[,c("date",names(data)[!names(data) %in% "date"])]
data$date<-as.Date(paste(data$date,"2020",sep=""),tryFormats="%d %b %Y")
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
data<-data%>%mutate(t=data$date-start)
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
data<-data[,c("t",names(data)[!names(data) %in% "t"])]
data<-data[,c("date",names(data)[!names(data) %in% "date"])]
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
n<-1:12
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/Raw_India/"
for (i in n)
{
url<-paste("https://api.covid19india.org/raw_data",i,".json",sep="")
filename<-paste(dir,"raw_data",i,".json",sep="")
download.file(url, filename)
}
for (i in n)
{
filename<-paste(dir,"raw_data",i,".json",sep="")
data<-fromJSON(filename)%>%as.data.frame
names(data)<-sapply(strsplit(names(data),split=".",fixed=TRUE),function(x) (x[2]))
if(i<=2){data<-subset(data,select=-c(backupnotes))}
write.csv(data,paste(dir,"raw_data",i,".csv",sep=""), row.names = FALSE)
}
for (i in n)
{
filename<-paste(dir,"raw_data",i,".csv",sep="")
dat<-read.csv(file=filename,sep=",")
write.table(dat,paste(dir,"raw_data",".csv",sep=""), row.names = FALSE, col.names=ifelse(i==1,TRUE,FALSE), append=TRUE, sep=",")
}
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
jpeg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.jpg", width = 1000)
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
jpeg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.jpg", width = 1600, height=900)
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
jpeg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.jpg", width = 1000, height=756)
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
svg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.svg", width = 1000, height=756)
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
svg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.svg")
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
jpeg("C:/Users/Ankan Mukherjee/Documents/Covid 19/Images/Covid_India_Levitt_Metric.jpeg")
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
dev.off()
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
#Assumptions are
#1. Levitt Model is obeyed.
#2. March 11, 2020 is considered as Day 0.
#3. Case numbers follow the current trend.
#Source of data: "https://www.worldometers.info/coronavirus/country/india/"
#Collecting the Data
filename<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/covind.csv"
data<-read.csv(filename)
data<-na.omit(data)
#Presetting Some Variables
l<-data$t[length(data$t)]
f<-1.001
#Segregating the Data
y<-data$H[30:l]
x<-data$t[30:l]
#Linear Modeling
lmResult <- summary(lm(y~x))
c<-coef(lmResult)[1]
m<-coef(lmResult)[2]
#Equation of the Best Fit Line
Y<-function(X)
{
m*X+c
}
#Plotting the Data
plot(y~x,xlim=c(25,l+5),ylim=c(1.00,1.10),main="Covid Cases in India",xlab="Days since first case(t)",ylab="H(t)=X(t)/X(t-1)",col=rgb(0,0,255,maxColorValue=255),pch=20)
abline(c,m,col=rgb(255,0,0,maxColorValue=255))
points(Y(x)~x,xlim=c(20,l+5),ylim=c(1.00,1.10),col=rgb(255,0,0,maxColorValue=255),pch=4)
grid(nx=20,ny=20)
#Calculating the Time When the Pandemic Ends
T<-(f-c)/m
print(paste("Pandemic ends around ",round(T-l)," days from today.",sep=""))
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"case_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"case_count.json",sep="")
data<-fromJSON(filename)$cases_time_series%>%as.data.frame
start<-as.Date("30 Jan 2020",tryFormats="%d %b %Y")
data$date<-as.Date(paste(data$date,"2020",sep=""),tryFormats="%d %b %Y")
data<-data%>%mutate(t=data$date-start)
data<-data[,c("t",names(data)[!names(data) %in% "t"])]
data<-data[,c("date",names(data)[!names(data) %in% "date"])]
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"case_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"case_count.json",sep="")
data<-fromJSON(filename)$cases_time_series%>%as.data.frame
start<-as.Date("30 Jan 2020",tryFormats="%d %b %Y")
data$date<-as.Date(paste(data$date,"2020",sep=""),tryFormats="%d %b %Y")
data<-data%>%mutate(t=data$date-start)
data<-data[,c("t",names(data)[!names(data) %in% "t"])]
data<-data[,c("date",names(data)[!names(data) %in% "date"])]
write.csv(data,paste(dir,"case_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("statecode",names(data)[!names(data) %in% "statecode"])]
data<-data[,c("state",names(data)[!names(data) %in% "state"])]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
data<-data[,-1]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
data<-data[-1,]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
data<-data%>%sort(statecode)
data<-data%>%order(statecode)
?sort
?order
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
data<-data[-1,]
data<-data[order(statecode),]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
data<-data[-1,]
data<-data[order(data$statecode),]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
data<-subset(data, statecode!="UN" & statecode!="TT")
data<-data[order(data$statecode),]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
data<-subset(data, statecode!="UN" & statecode!="TT")
data<-data[order(data$statecode),]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
library(jsonlite)
library(tidyverse)
#Source of data: "https://api.covid19india.org"
dir<-"C:/Users/Ankan Mukherjee/Documents/Covid 19/Data/India_Tally/"
url<-"https://api.covid19india.org/data.json"
filename<-paste(dir,"statewise_count.json",sep="")
download.file(url, filename)
filename<-paste(dir,"statewise_count.json",sep="")
data<-fromJSON(filename)$statewise%>%as.data.frame
data<-data[,c("state","statecode","confirmed","deaths","recovered","active","deltaconfirmed","deltadeaths","deltarecovered","lastupdatedtime","migratedother","statenotes")]
data<-subset(data, statecode!="UN" & statecode!="TT")
data<-data[order(data$statecode),]
write.csv(data,paste(dir,"statewise_count.csv",sep=""), row.names = FALSE)
shiny::runApp('Covid 19/App')
runApp('Covid 19/App')
runApp('Covid 19/App')
runApp('Covid 19/App')
?updateSelectInput
runApp('Covid 19/App')
runApp('Covid 19/App')
runApp('Covid 19/App')
?actionButton
runApp('Covid 19/App')
runApp('Covid 19/App')
runApp('Covid 19/App')
runApp('Covid 19/App')
